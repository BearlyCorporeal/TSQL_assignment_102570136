IF OBJECT_ID('Sale') IS NOT NULL DROP TABLE SALE;
IF OBJECT_ID('Product') IS NOT NULL DROP TABLE PRODUCT;
IF OBJECT_ID('Customer') IS NOT NULL DROP TABLE CUSTOMER;
IF OBJECT_ID('Location') IS NOT NULL DROP TABLE LOCATION;
GO
CREATE TABLE CUSTOMER0136 (
CUSTID INT
, CUSTNAME  NVARCHAR(100)
, SALES_YTD INT
, STATUS    NVARCHAR(7)
, PRIMARY KEY     (CUSTID) );

CREATE TABLE PRODUCT0136 (
PRODID INT
, PRODNAME  NVARCHAR
, SELLING_PRICE   MONEY
, SALES_YTD MONEY
, PRIMARY KEY     (PRODID));

CREATE TABLE SALE0136 (
SALEID INT
, CUSTID    INT
, PRODID    INT
, QTY INT
, PRICE     MONEY
, SALEDATE  DATE
, PRIMARY KEY     (SALEID)
, FOREIGN KEY     (CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY     (PRODID) REFERENCES PRODUCT);

CREATE TABLE LOCATION0136 (
LOCID     NVARCHAR(5)
, MINQTY    INTEGER
, MAXQTY    INTEGER
, PRIMARY KEY     (LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LEN(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY));
IF OBJECT_ID('SALE_SEQ') IS NOT NULL DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO

create PROCEDURE ADD_CUSTOMER0136 @pcustid INT,@pcustname nvarchar(100) as 
BEGIN TRY
BEGIN TRANSACTION ADD_CUSTOMER
declare @primarycheck int;
set @primarycheck = (select CUSTID from CUSTOMER0136 WHERE CUSTID = @pcustid)
if @primarycheck != null THROW 50010, 'Duplicate customer ID', 1 
IF @pcustid < 1 OR @pcustid > 499 THROW 50020, 'Customer ID out of range', 1
INSERT INTO CUSTOMER0136(CUSTID,CUSTNAME,SALES_YTD,STATUS) VALUES (@pcustid,@pcustname,0,'OK');
COMMIT TRANSACTION ADD_CUSTOMER
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION ADD_CUSTOMER
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE DELETE_ALL_CUSTOMERS0136 as 
BEGIN TRY
BEGIN TRANSACTION DELETE_ALL_CUSTOMERS
DECLARE @NumOfRows Int; 
SELECT @NumOfRows = count(*) FROM CUSTOMER0136; 
DELETE FROM CUSTOMER0136 ;
SELECT CONCAT(@NumOfRows);
COMMIT TRANSACTION DELETE_ALL_CUSTOMERS
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION DELETE_ALL_CUSTOMERS
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE ADD_PRODUCT0136 @pprodid Int,@pprodname nvarchar,@pprice money as 
BEGIN TRY
BEGIN TRANSACTION ADD_PRODUCT
declare @primarycheck int;
set @primarycheck = (select PRODID from PRODUCT0136 WHERE PRODID = @pprodid)
if @primarycheck != null THROW 50030, 'Duplicate product ID', 1 
IF @pprodid < 1000 OR @pprodid > 2500 THROW 50040, 'Product ID out of range', 1
IF @pprice < 0 OR @pprice > 999.99 THROW 50050, 'Price out of range', 1
INSERT INTO PRODUCT0136(PRODID,PRODNAME,SELLING_PRICE,SALES_YTD) VALUES (@pprodid,@pprodname,@pprice,0);
COMMIT TRANSACTION ADD_PRODUCT
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION ADD_PRODUCT
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;
;

GO

create PROCEDURE DELETE_ALL_PRODUCTS0136 as 
BEGIN TRY
BEGIN TRANSACTION DELETE_ALL_PRODUCTS
DECLARE @NumOfRows Int; 
SELECT @NumOfRows = count(*) FROM PRODUCT0136;
DELETE FROM PRODUCT0136;
SELECT CONCAT(@NumOfRows);
COMMIT TRANSACTION DELETE_ALL_PRODUCTS
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION DELETE_ALL_PRODUCTS
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE GET_CUSTOMER_STRING0136 @pcustid Int as 
BEGIN TRY
BEGIN TRANSACTION GET_CUSTOMER_STRING
DECLARE @custexisting INT;
SET @custexisting = (SELECT CUSTID FROM CUSTOMER0136 WHERE CUSTID = @pcustid);
IF @custexisting != @pcustid THROW 50060, 'Customer ID not found', 1 
DECLARE @NameOfCust nvarchar(100);
SET @NameOfCust = (SELECT CUSTNAME FROM CUSTOMER0136 WHERE CUSTID = @pcustid);
DECLARE @SalesOfCust INT;
SET @SalesOfCust = (SELECT SALES_YTD FROM CUSTOMER0136 WHERE CUSTID = @pcustid);
DECLARE @StatusOfCust NVARCHAR(7);
SET @StatusOfCust = (SELECT STATUS FROM CUSTOMER0136 WHERE CUSTID = @pcustid);
SELECT CONCAT('custid:' + @pcustid + ' name:' + @NameOfCust + ' status:' + @StatusOfCust +  ' sales_ytd:' + @SalesOfCust + ';');
COMMIT TRANSACTION GET_CUSTOMER_STRING
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION GET_CUSTOMER_STRING
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE UPD_CUST_SALESYTD0136 @pcustid Int,@pamt Int as 
BEGIN TRY
BEGIN TRANSACTION UPD_CUST_SALESYTD
UPDATE CUSTOMER0136 set SALES_YTD = @pamt WHERE @pcustid = CUSTID
IF @pamt < -999.99 OR @pamt > 999.99 THROW 50080, 'Amount out of range', 1;
IF @@ROWCOUNT = 0 THROW 50070, 'Customer ID not found', 1;
COMMIT TRANSACTION UPD_CUST_SALESYTD
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION UPD_CUST_SALESYTD
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH; 

GO

create PROCEDURE GET_PRODUCT_STRING013 @pprodid Int as 
BEGIN TRY
BEGIN TRANSACTION GET_PRODUCT_STRING
DECLARE @prodexisting INT;
SET @prodexisting = (SELECT PRODID FROM PRODUCT0136 WHERE PRODID = @pprodid);
IF @prodexisting = NULL THROW 50090, 'Product ID not found', 1 
DECLARE @Name NVARCHAR
SET @Name = (SELECT PRODNAME FROM PRODUCT0136 WHERE PRODID = @pprodid)
DECLARE @Price money
SET @Price = (SELECT SELLING_PRICE FROM PRODUCT0136 WHERE PRODID = @pprodid)
DECLARE @salesytd money
SET @salesytd = (SELECT SALES_YTD FROM PRODUCT0136 WHERE PRODID = @pprodid)
SELECT CONCAT('Name:' + ' Price:' + @Price + ' salesytd:' + @sales_ytd)
COMMIT TRANSACTION GET_PRODUCT_STRING
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION GET_PRODUCT_STRING
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;;

GO

create PROCEDURE  UPD_PROD_SALESYTD0136 @pprodid Int,@pamt Int as 
BEGIN TRY
BEGIN TRANSACTION UPD_PROD_SALESYTD
IF @@ROWCOUNT = 0 THROW 50100, 'Product ID not found', 1;
IF @pamt < -999.99 OR @pamt > 999.99 THROW 50110, 'Amount out of range', 1
UPDATE PRODUCT0136 set SALES_YTD = @pamt WHERE @pprodid = PRODID
COMMIT TRANSACTION UPD_PROD_SALESYTD
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION UPD_PROD_SALESYTD
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE UPD_CUSTOMER_STATUS0136 @pcustid Int,@pstatus Nvarchar as 
BEGIN TRY
BEGIN TRANSACTION
UPDATE CUSTOMER0136 set STATUS = @pstatus WHERE @pcustid = CUSTID
IF @@ROWCOUNT = 0 THROW 50120, 'Customer ID not found', 1;
COMMIT TRANSACTION UPD_CUSTOMER_STATUS
END TRY
Begin CATCH
ROLLBACK TRANSACTION UPD_CUSTOMER_STATUS
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE ADD_SIMPLE_SALE0136 @pcustid Int, @pprodid Int , @pqty Int as 
BEGIN TRY
BEGIN TRANSACTION ADD_SIMPLE_SALE
DECLARE @pprice int;
set @pprice =(select PRICE FROM PRODUCT0136 WHERE PRODID = @pprodid);
declare @amount int;
set @amount = @pqty * @pprice
DECLARE @StatusOfCust NVARCHAR(7);
declare @pid Int;
SET @pid = @pprodid;
declare @cid Int;
SET @cid = @pcustid;
SET @StatusOfCust = (SELECT STATUS FROM CUSTOMER0136 WHERE CUSTID = @pcustid);
IF @StatusOfCust != 'OK' THROW 50150, 'Customer status is not OK', 1;
EXECUTE UPD_PROD_SALESYTD0136 @pprodid = @pid,@pamt = @amount; 
EXECUTE UPD_CUST_SALESYTD0136 @pcustid = @cid,@pamt = @amount; 
INSERT INTO SALE0136(SALEID,CUSTID,PRODID,QTY,PRICE) VALUES(@pcustid,@pprodid,@pqty,@pprice)
COMMIT TRANSACTION ADD_SIMPLE_SALE
END TRY
Begin CATCH
ROLLBACK TRANSACTION ADD_SIMPLE_SALE
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE GET_ALL_CUSTOMERS0136 @POUTCUR	Cursor as 
BEGIN TRY
BEGIN TRANSACTION GET_ALL_CUSTOMERS
set @POUTCUR = (select * FROM CUSTOMER0136)
COMMIT TRANSACTION GET_ALL_CUSTOMERS
END TRY
Begin CATCH
ROLLBACK TRANSACTION GET_ALL_CUSTOMERS
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE GET_ALL_PRODUCTS0136 @POUTCUR	Cursor as 
BEGIN TRY
BEGIN TRANSACTION GET_ALL_PRODUCTS
set @POUTCUR = (select * FROM PRODUCT0136)
COMMIT TRANSACTION GET_ALL_PRODUCTS
END TRY
Begin CATCH
ROLLBACK TRANSACTION GET_ALL_PRODUCTS
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

create PROCEDURE ADD_COMPLEX_SALE0136 @pcustid Int, @pprodid Int , @pqty Int, @pdate Nvarchar as 
BEGIN TRY
BEGIN TRANSACTION ADD_COMPLEX_SALE
INSERT INTO SALE0136(SALEID,CUSTID,PRODID,QTY,PRICE,SALEDATE) VALUES(   ,@pcustid,@pprodid,@pqty,@pprice,@pdate)
COMMIT TRANSACTION ADD_COMPLEX_SALE
END TRY
Begin CATCH
ROLLBACK TRANSACTION ADD_COMPLEX_SALE
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;


GO

create PROCEDURE ADD_LOCATION0136 @ploccode nvarchar, @pminqty Int , @pmaxqty Int as 
BEGIN TRY
BEGIN TRANSACTION ADD_LOCATION
INSERT INTO LOCATION0136(LOCID,MINQTY,MAXQTY) VALUES(@ploccode,@pminqty,@pmaxqty)
COMMIT TRANSACTION ADD_LOCATION
END TRY
Begin CATCH
ROLLBACK TRANSACTION ADD_LOCATION
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH;

GO

CREATE PROCEDURE COUNT_PRODUCT_SALES0136 @pdays int AS
BEGIN TRY
BEGIN TRANSACTION COUNT_PRODUCT_SALES

COMMIT TRANSACTION COUNT_PRODUCT_SALES
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION COUNT_PRODUCT_SALES
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH

GO

CREATE PROCEDURE DELETE_SALE0136 AS
BEGIN TRY
BEGIN TRANSACTION DELETE_SALE

COMMIT TRANSACTION DELETE_SALE
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION DELETE_SALE
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH

GO

CREATE PROCEDURE DELETE_ALL_SALES0136 AS
BEGIN TRY
BEGIN TRANSACTION DELETE_ALL_SALES

COMMIT TRANSACTION DELETE_ALL_SALES
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION DELETE_ALL_SALES
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH

GO

CREATE PROCEDURE DELETE_CUSTOMER0136 AS
BEGIN TRY
BEGIN TRANSACTION DELETE_CUSTOMER

COMMIT TRANSACTION DELETE_CUSTOMER
END TRY

BEGIN CATCH
ROLLBACK TRANSACTION DELETE_CUSTOMER
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH

GO

CREATE PROCEDURE DELETE_PRODUCT0136 AS
BEGIN TRY
BEGIN TRANSACTION DELETE_PRODUCT

COMMIT TRANSACTION DELETE_PRODUCT
END TRY
BEGIN CATCH
ROLLBACK TRANSACTION DELETE_PRODUCT
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1
END CATCH

GO

